dnl	This file is an input file used by the GNU "autoconf" program to
dnl	generate the file "configure", which is run during Tk installation
dnl	to configure the system for the local environment.
AC_INIT(Makefile.in)

#--------------------------------------------------------------------
#       Load the local configuration from config.local
#--------------------------------------------------------------------
# The default package selection for this configure
AC_ARG_WITH(config-local, [  --with-config-local     read the local configuration file], config_local=1, config_local=0)
if test $config_local = 1; then
  echo Loading default configuration from: config.local
  . ./config.local
else
  echo Loading default configuration from: config.init
  . ./config.init
fi

#--------------------------------------------------------
#       Checking ARCH and shared library support.
#       This code is taken from the tcltk_shlib package
#       published by Xiaokun Zhu (xiaokun@stats.gla.ac.uk)
#--------------------------------------------------------
MACHINE=`${srcdir}/config.guess`;
echo "Machine is $MACHINE";
OS_TYPE=`${srcdir}/config.sep $MACHINE`;
echo "OS-Type is $OS_TYPE (UNKNOWN is no problem)";
AC_ARG_WITH(noshlib, [  --with-noshlib          no shared libraries], noshlib=1)
if test $noshlib = 0; then
  SHARE_ARCH="$OS_TYPE";
  echo "Shared library architechure is $SHARE_ARCH (UNKNOWN means no shared libs)";
else
  SHARE_ARCH="UNKNOWN"
fi

SOTKREV=3.6
SOXPMREV=4.2
SHAREDCC='rm -f $*.o $(SHDIR)/$*.o; \\\
	$(CC) -c $(CC_SWITCHES) $(PICFLAGS) $<; \\\
	mv $*.o $(SHDIR)/$*.o; \\'

case "$SHARE_ARCH" in
  SVR4)
    echo "SVR4 shared library supported"
    UNSHARED=""
    PICFLAGS="-K pic"
    SHLIBSO="lib\$(LOCAL_LIB_NAME).so.$SOTKREV"
    SHLIBSO_XPM="libXpm.so.$SOXPMREV"
    SHLIBSO_BLD='(cd shared; \\\
	/usr/ccs/bin/ld -G -z text -h $(SHLIBSO) -o ../$(SHLIBSO) $(OBJS) $(SHARED_LIBS) ); \\\
	$(INSTALL_DATA) $(SHLIBSO) $(LIB_DIR); \\\
	rm -f $(LIB_DIR)/lib$(SHLIBSO).so; \\\
	(cd $(LIB_DIR); rm -f lib$(LOCAL_LIB_NAME).so; \\\
	 $(LN_S) ./$(SHLIBSO) lib$(LOCAL_LIB_NAME).so);'
    SHLIBSA=""
    SHLIBSA_BLD=""
    SHDIR=shared
    ;;
  SUN) 
    echo "SunOs shared library supported"
    UNSHARED="tclMtherr.o"
    PICFLAGS="-PIC" 
    SHLIBSO="lib\$(LOCAL_LIB_NAME).so.$SOTKREV"
    SHLIBSO_XPM="libXpm.so.$SOXPMREV"
    SHLIBSO_BLD='(cd shared; \\\
	ld -assert pure-text -o ../$(SHLIBSO) $(OBJS) $(SHARED_LIBS) ); \\\
	$(INSTALL_DATA) $(SHLIBSO) $(LIB_DIR)'
    SHLIBSA=""
    SHLIBSA_BLD=""
    SHDIR=shared
    ;;
  HP) 
    echo "HP-UX 9.01 shared library supported"
    UNSHARED=""
    PICFLAGS="+z" 
    SHLIBSO="lib\$(LOCAL_LIB_NAME).so"
    SHLIBSO_XPM="libXpm.so"
    SHLIBSO_BLD='(cd shared; \\\
	ld -b -n -o ../$(SHLIBSO) $(OBJS) $(SHARED_LIBS) ); \\\
	$(INSTALL_DATA) $(SHLIBSO)'
    SHLIBSA=""
    SHLIBSA_BLD=""
    SHDIR=shared
    ;;
  IBM) 
    echo "IBM R6000 shared library supported"
    UNSHARED=""
    PICFLAGS="-bM\:SRE" 
    SHLIBSO="lib\$(LOCAL_LIB_NAME).a"
    SHLIBSO_XPM="libXpm.so.$SOXPMREV"
    SHLIBSO_BLD='cd shared; \\\
	ar cr ./$(SHLIBSO)~ $(OBJS) ); \\\
	dump -g $(SHLIBSO)~ | sed -n -e "s/^\$(F1) 	$(F2)*$(F1)0-9$(F2)$(F1)0-9$(F2)*$(F1)	 $(F2)*\($(F1)^	 .$(F2)$(F1)^	 $(F2)*\)$$/\001/p" > $(SHLIBSO).syms; \\\
	ld -o shr.o $(SHLIBSO)~ -H512 -T512 -bM\:SRE -bE\:$(SHLIBSO).syms -lc -lm; \\\
	rm -f $(SHLIBSO)~; \\\
	ar cr $(SHLIBSO)~ shr.o $(UNSHARED); \\\
	rm -f $(SHLIBSO).syms $(SHLIBSO) shr.o; \\\
	mv $(SHLIBSO)~ $(SHLIBSO); \\\
	cd ..'
    SHLIBSA=""
    SHLIBSA_BLD=""
    SHDIR=shared
    ;;
  TEST) 
    echo "Testing shared library supported on non shared OS"
    UNSHARED=""
    PICFLAGS="" 
    SHLIBSO="lib\$(LOCAL_LIB_NAME).so.$SOTKREV"
    SHLIBSO_XPM="libXpm.so.$SOXPMREV"
    SHLIBSO_BLD='(cd shared; \\\
	ar r ../$(SHLIBSO) $(OBJS); \\\
        $(RANLIB) ../$(SHLIBSO) ); \\\
	$(INSTALL_DATA) $(SHLIBSO) $(LIB_DIR)'
    SHLIBSA=""
    SHLIBSA_BLD=""
    SHDIR=shared
    ;;

#
# add new platform here
# ...
#
  *)
    echo "Shared libraries unsupported on platform $SHARE_ARCH (this is no problem)!"
    SHAREDCC=""
    UNSHARED=""
    PICFLAGS=""
    SHLIBSO=""
    SHLIBSO_XPM=""
    SHLIBSO_BLD=""
    SHDIR=""
    ;;
esac

AC_SUBST(SHAREDCC)
AC_SUBST(UNSHARED)
AC_SUBST(SHLIBSO)
AC_SUBST(SHLIBSO_XPM)
AC_SUBST(SHLIBSO_BLD)
AC_SUBST(SHDIR)

#--------------------------------------------------------------------
#       Look for the original tk source. By default tk3.6
#       is used.
#--------------------------------------------------------------------
echo checking for Tcl/Tk
GET_TARGETS=""
PATCH_TARGETS=""
BUILD_TARGETS=""
TK_SOURCE=""
TK_VERSION=""
TCL_SOURCE=""
TCL_VERSION=""
KANJI_NAME=""
KANJI_FLAGS=""
KANJIOBJS=""
if test -r ../tk3.6/tk.h; then
  TK_SOURCE="../tk3.6"
  TK_VERSION="3.6"
elif test -r ../tk3.6-jp/tk.h; then
  kanji=1
  KANJI_NAME="-jp"
  TK_SOURCE="../tk3.6-jp"
  TK_VERSION="3.6"
elif test -r ../tk3.6jp/tk.h; then
  kanji=1
  KANJI_NAME="-jp"
  TK_SOURCE="../tk3.6jp"
  TK_VERSION="3.6"
elif test -r ../tk/tk.h; then
  TK_SOURCE="../tk"
  TK_VERSION="3.6"
else
  echo "WARNING: could not find a matching directory for tk3.6!"
fi
if test -r ../tcl7.3/tcl.h; then
  TCL_SOURCE="../tcl7.3"
  TCL_VERSION="7.3"
elif test -r ../tcl7.3-jp/tcl.h; then
  TCL_SOURCE="../tcl7.3-jp"
  TCL_VERSION="7.3"
elif test -r ../tcl7.3jp/tcl.h; then
  TCL_SOURCE="../tcl7.3jp"
  TCL_VERSION="7.3"
elif test -r ../tcl/tcl.h; then
  TK_SOURCE="../tcl"
  TK_VERSION="7.3"
else
  echo "WARNING: could not find a matching directory for tcl7.3!"
fi  

if test $kanji = 0; then
  AC_ARG_WITH(kanji, [  --with-kanji            add kanji support], kanji=1)
  if test $kanji = 1; then
    if test -r ../tk3.6-jp/tk.h; then
      KANJI_NAME="-jp"
      TK_SOURCE="../tk3.6-jp"
      TK_VERSION="3.6"
    elif test -r ../tk3.6jp/tk.h; then
      KANJI_NAME="-jp"
      TK_SOURCE="../tk3.6jp"
      TK_VERSION="3.6"
    else
      echo "WARNING: cannot find Kanji Tk version!"
    fi
    if test -r ../tcl7.3-jp/tcl.h; then
     TCL_SOURCE="../tcl7.3-jp"
      TCL_VERSION="7.3"
    elif test -r ../tcl7.3jp/tcl.h; then
      TCL_SOURCE="../tcl7.3jp"
      TCL_VERSION="7.3"
    else
      echo "WARNING: cannot find Kanji Tcl version!"
    fi
  fi
fi
if test $kanji = 1; then
  KANJI_FLAGS="-DKANJI -DKINPUT2"
  KANJIOBJS="tkWStr.o tkKinput2.o tkCtext.o"
  GET_TARGETS="$GET_TARGETS get-kanji-files"
fi

if test "$SHDIR" != ""; then
  if test ! -d $TK_SOURCE/$SHDIR; then
    echo "WARNING: could not find a shared tk directory!"
    echo "         Building of shared libraries disabled!"
    SHAREDCC=""
    UNSHARED=""
    PICFLAGS=""
    SHLIBSO=""
    SHLIBSO_BLD=""
    SHDIR=""
  fi
fi

TCLTK_LD_CMD=""
GET_TK_SHARED_OBJECTS=""
if test "$SHDIR" != ""; then
  if test "$OS_TYPE" = "SVR4"; then
    TCLTK_LD_CMD="-L\$(LIB_DIR) -L\$(X11_LIB_DIR) -R\$(LIB_DIR) -R\$(X11_LIB_DIR) -l\$(TK_LIB_NAME) -ltcl"
  else
    TCLTK_LD_CMD="-L\$(LIB_DIR) -L\$(X11_LIB_DIR) -l$(TK_LIB_NAME) -ltcl"
  fi
  GET_TK_SHARED_OBJECTS="cp $TK_SOURCE/$SHDIR/* libtk/$SHDIR"
else
  TCLTK_LD_CMD="../libtk/lib\$(TK_LIB_NAME).a ../$TCL_SOURCE/libtcl.a"
fi

test_prefix="/usr/local"
if test "$prefix" != "" -a "$prefix" != "NONE"; then
  test_prefix=$prefix
fi
TK_LIBRARY_NAME=""
AC_ARG_WITH(tklibrary, [  --with-tklibrary=DIR    set TK_LIBRARY to this value], TK_LIBRARY_NAME=$withval)
if test "$TK_LIBRARY_NAME" = ""; then
  if test -d $test_prefix/lib/tk$TK_VERSION; then
    TK_LIBRARY_NAME="\$(prefix)/lib/tk$TK_VERSION"
  elif test -d $test_prefix/lib/tk$TK_VERSION; then
    TK_LIBRARY_NAME="\$(prefix)/lib/tk$TK_VERSION"
  elif test -d $test_prefix/lib/tk$TK_VERSION$KANJI_NAME; then
    TK_LIBRARY_NAME="\$(prefix)=/lib/tk$TK_VERSION$KANJI_NAME"
  elif test -d $test_prefix/lib/tk; then
    TK_LIBRARY_NAME="\$(prefix)/lib/tk"
  else
    echo "WARNING: could not find the TK_LIBRARY path! If you did not"
    echo "         install Tk yet, please do that before you continue."
    echo "         Otherwise you probably use a non standard name for"
    echo "         the Tk library directory. Perform a single step"
    echo "         building as described in the README. Change the"
    echo "         TK_LIBRARY variable in the toplevel Makefile with"
    echo "         the --with-tklibrary parameter!!!"
    echo "         Or you continue with the building, and install"
    echo "         the package by hand. In that case you have to set"
    echo "         the environment variable TK_LIBRARY to the correct"
    echo "         Tk library directory!!!"
    TK_LIBRARY_NAME="\$(prefix)/lib/tk"
  fi
fi
XF_LIBRARY_NAME="\$(prefix)/lib/xf"
AC_ARG_WITH(xflibrary, [  --with-xflibrary=DIR    set XF_LIBRARY to this value], XF_LIBRARY_NAME=$withval)

AC_SUBST(TCL_SOURCE)
AC_SUBST(TCL_VERSION)
AC_SUBST(TK_SOURCE)
AC_SUBST(TK_VERSION)
AC_SUBST(KANJI_NAME)
AC_SUBST(KANJI_FLAGS)
AC_SUBST(KANJIOBJS)
AC_SUBST(TCLTK_LD_CMD)
AC_SUBST(WISH_NAME)
AC_SUBST(GET_TK_SHARED_OBJECTS)
AC_SUBST(TK_LIBRARY_NAME)
AC_SUBST(XF_LIBRARY_NAME)

#--------------------------------------------------------------------
#       Here begins the "standard" Tk configure.
#--------------------------------------------------------------------

AC_PROG_INSTALL
AC_PROG_RANLIB
AC_LN_S
AC_PROG_CC
AC_ARG_WITH(nogcc, [  --with-nogcc            explicitly disable use of gcc], nogcc=1, nogcc=0)
if test $nogcc = 1; then
  CC="cc"
  GCC=0
fi

#--------------------------------------------------------------------
#       Test for header files.
#--------------------------------------------------------------------
AC_HAVE_HEADERS(unistd.h)

#--------------------------------------------------------------------
#	Include sys/select.h if it exists and if it supplies things
#	that appear to be useful and aren't already in sys/types.h.
#	This appears to be true only on the RS/6000 under AIX.  Some
#	systems like OSF/1 have a sys/select.h that's of no use, and
#	other systems like SCO UNIX have a sys/select.h that's
#	pernicious.  If "fd_set" isn't defined anywhere then set a
#	special flag.
#--------------------------------------------------------------------

echo checking for sys/select.h
AC_TRY_COMPILE([#include <sys/types.h>],
	[fd_set readMask, writeMask;], ,
	AC_HEADER_EGREP(fd_mask, sys/select.h, AC_DEFINE(HAVE_SYS_SELECT_H),
		AC_DEFINE(NO_FD_SET)))

#--------------------------------------------------------------------
#	Supply a substitute for stdlib.h if it doesn't define strtol,
#	strtoul, or strtod (which it doesn't in some versions of SunOS).
#--------------------------------------------------------------------

echo checking for proper stdlib.h
AC_HEADER_EGREP(strtol, stdlib.h, tk_stdlib=1, tk_stdlib=0)
AC_HEADER_EGREP(strtoul, stdlib.h, , tk_stdlib=0)
AC_HEADER_EGREP(strtod, stdlib.h, , tk_stdlib=0)
if test $tk_stdlib = 0; then
    AC_DEFINE(NO_STDLIB_H)
fi

#--------------------------------------------------------------------
#	Check for various typedefs and provide substitutes if
#	they don't exist.
#--------------------------------------------------------------------

AC_MODE_T
AC_PID_T
AC_SIZE_T
AC_UID_T

#--------------------------------------------------------------------
#	Locate the X11 header files and the X11 library archive.  Try
#	the ac_find_x macro first, but if it doesn't find the X stuff
#	(e.g. because there's no xmkmf program) then check through
#	a list of possible directories.
#--------------------------------------------------------------------

AC_PROGRAM_CHECK(tk_ok, xmkmf, 1, 0)
if test $tk_ok = 1; then
    AC_FIND_X
fi
if test "$XINCLUDE_DIR" != ""; then
    x_includes="$XINCLUDE_DIR"
fi
if test "$x_includes" = /usr/include; then
    XINCLUDES="# no special path needed"
elif test "$x_includes" != ""; then
    XINCLUDES=" -I$x_includes"
else
    echo checking for X11 header files
    XINCLUDES="# no special path needed"
    AC_TEST_CPP([#include <X11/Intrinsic.h>], , XINCLUDES="nope")
    if test "$XINCLUDES" = nope; then
        dirs="/usr/unsupported/include /usr/local/include /usr/X386/include /usr/include/X11R4 /usr/X11R5/include /usr/include/X11R5 /usr/openwin/include /usr/X11/include"
        for i in $dirs ; do
	    if test -r $i/X11/Intrinsic.h; then
	        XINCLUDES=" -I$i"
	    fi
        done
    fi
fi
if test "$XINCLUDES" = nope; then
  echo "WARNING:  couldn't find any X11 include files."
  XINCLUDES="# no include files found"
fi
AC_SUBST(XINCLUDES)

if test "$XLIBRARY_DIR" != ""; then
    x_libraries="$XLIBRARY_DIR"
fi
X11_LIB_DIR=""
if test "$x_libraries" = /usr/lib; then
    XLIBSW=-lX11
    X11_LIB_DIR=/usr/lib
elif test "$x_libraries" != ""; then
    XLIBSW="-L$x_libraries -lX11"
    X11_LIB_DIR=$x_libraries
else
    echo "checking for X11 library archive"
    AC_CHECK_LIB(X11, main, XLIBSW="-lX11", XLIBSW=nope)
    if test "$XLIBSW" = nope; then
	dirs="/usr/unsupported/lib /usr/local/lib /usr/X386/lib /usr/lib/X11R4 /usr/X11R5/lib /usr/lib/X11R5 /usr/openwin/lib /usr/X11/lib"
	for i in $dirs ; do
	    if test -r $i/libX11.a; then
		XLIBSW="-L$i -lX11"
		X11_LIB_DIR=$i
	    fi
	done
    fi
fi
if test "$XLIBSW" = nope ; then
    AC_CHECK_LIB(Xwindow, main, XLIBSW=-lXwindow)
fi
if test "$XLIBSW" = nope ; then
    echo "WARNING:  couldn't find the X11 library archive.  Using -lX11."
    XLIBSW=-lX11
fi
AC_SUBST(XLIBSW)
AC_SUBST(X11_LIB_DIR)

#--------------------------------------------------------------------
#	Check for the existence of various libraries.  The order here
#	is important, so that then end up in the right order in the
#	command line generated by Make.
#--------------------------------------------------------------------

AC_CHECK_LIB(Xbsd, main, [LIBS="$LIBS -lXbsd"])
AC_CHECK_LIB(socket, main, [LIBS="$LIBS -lsocket"])
AC_CHECK_LIB(nsl, main, [LIBS="$LIBS -lnsl"])

#--------------------------------------------------------------------
#       Test for some special stuff.
#--------------------------------------------------------------------
XPM_OPT1=""
AC_FUNC_CHECK(strdup, need_strdup=0, need_strdup=1)
if test $need_strdup = 1; then
  XPM_OPT1="-DNEED_STRDUP"
fi
XPM_OPT2=""
AC_FUNC_CHECK(strcasecmp, need_strcasecmp=0, need_strcasecmp=1)
if test $need_strcasecmp = 1; then
  XPM_OPT2="-DNEED_STRCASECMP"
fi
AC_SUBST(XPM_OPT1)
AC_SUBST(XPM_OPT2)

XPM_CFLAGS=""
case "$OS_TYPE" in
   SVR4 )
	XPM_CFLAGS="-DSVR4"
	;;
esac
AC_SUBST(XPM_CFLAGS)

AC_CHECK_LIB(ieee, main, [LIBS="$LIBS -lieee"])

#--------------------------------------------------------------------
#       Now check the several -with-PACKAGE commands, to
#       see what we want to add to this wish
#--------------------------------------------------------------------

# search for locally installed libraries too
if test "$exec_prefix" != ""; then
  LDFLAGS="${LDFLAGS} -L${exec_prefix}/lib"
else
  LDFLAGS="${LDFLAGS} -L/usr/local/lib"
fi

echo checking for additional packages
EXTENSION_X11_LIBS=""

# TkIcon
TKICON_CFLAGS=""
TKICON_OBJS=""
TKICON_LIBS=""
TKICON_LIB=""
TKICON_LOCALLIB_OBJS=""
TKICON_TKLIB_OBJS=""
AC_ARG_WITH(tkicon, [  --with-tkicon           add the TkIcon package], tkicon=1)
if test $tkicon = 1; then
  echo adding TkIcon
  GET_TARGETS="$GET_TARGETS get-tkicon-files"
  PATCH_TARGETS="$PATCH_TARGETS patch-tkicon-files"
  TKICON_CFLAGS="-I../libTkMegaWidget"
  TKICON_TKLIB_OBJS="tkCanvIcon.o tkCanvEdge.o tkCanvLayout.o"
  tkpixmap=1
  tkmegawidget=1
fi
AC_SUBST(TKICON_CFLAGS)
AC_SUBST(TKICON_OBJS)
AC_SUBST(TKICON_LIBS)
AC_SUBST(TKICON_LIB)
AC_SUBST(TKICON_LOCALLIB_OBJS)
AC_SUBST(TKICON_TKLIB_OBJS)

# TkPixmap
TKPIXMAP_CFLAGS=""
TKPIXMAP_OBJS=""
TKPIXMAP_LIBS=""
TKPIXMAP_LIB=""
TKPIXMAP_LOCALLIB_OBJS=""
TKPIXMAP_TKLIB_OBJS=""
AC_ARG_WITH(tkpixmap, [  --with-tkpixmap         add the TkPixmap package], tkpixmap=1)
AC_ARG_WITH(tkpixmap-xpm, [    --with-tkpixmap-xpm        add the xpm format], tkpixmap_xpm=1; tkpixmap=1)
AC_ARG_WITH(tkpixmap-localxpm, [    --with-tkpixmap-localxpm   add the xpm format (use the local xpm library)], tkpixmap_localxpm=1; tkpixmap=1)
AC_ARG_WITH(tkpixmap-gif, [    --with-tkpixmap-gif        add the gif format], tkpixmap_gif=1; tkpixmap=1)
AC_ARG_WITH(tkpixmap-raw256, [    --with-tkpixmap-raw256     add the raw 256 format], tkpixmap_raw256=1; tkpixmap=1)
AC_ARG_WITH(tkpixmap-dps, [    --with-tkpixmap-dps        add the display postscript format], tkpixmap_dps=1; tkpixmap=1)
AC_ARG_WITH(tkpixmap-pinfo, [    --with-tkpixmap-pinfo      add the pinfo command], tkpixmap_pinfo=1; tkpixmap=1)
AC_ARG_WITH(tkpixmap-uxpm, [    --with-uxpm-pinfo          add the uxpm command], tkpixmap_uxpm=1; tkpixmap=1)
AC_ARG_WITH(tkpixmap-pixmaps, [    --with-pixmaps             include new default pixmaps into the binary], tkpixmap_pixmaps=1; tkpixmap=1)
if test $tkpixmap = 1; then
  echo adding TkPixmap
  GET_TARGETS="$GET_TARGETS get-tkpixmap-files"
  PATCH_TARGETS="$PATCH_TARGETS patch-tkpixmap-files"
  TKPIXMAP_CFLAGS="-I../../TkPixmap -I../libtk"
  TKPIXMAP_TKLIB_OBJS="bitmap.o gif.o xpm3.o raw256.o dpsSupport.o uxpm.o tkPixmap.o"
  if test $tkpixmap_xpm = 0 -a $tkpixmap_gif = 0 -a $tkpixmap_raw256 = 0 -a $tkpixmap_dps = 0 -a $tkpixmap_pinfo = 0 -a $tkpixmap_uxpm = 0 -a $tkpixmap_pixmaps = 0; then
    tkpixmap_xpm=1
    tkpixmap_gif=1
    tkpixmap_pinfo=1
    tkpixmap_uxpm=1
    tkpixmap_pixmaps=1
  fi
  if test $tkpixmap_xpm = 1 -o $tkpixmap_localxpm = 1; then
    TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -DUSE_XPM3"
  fi
  if test $tkpixmap_gif = 1; then
    TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -DUSE_GIF"
  fi
  if test $tkpixmap_raw256 = 1; then
    TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -DUSE_RAW256"
  fi
  if test $tkpixmap_dps = 1; then
    TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -DUSE_DPS"
  fi
  if test $tkpixmap_pinfo = 1; then
    TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -DUSE_PINFO"
  fi
  if test $tkpixmap_uxpm = 1; then
    TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -DUSE_UXPM"
  fi
  if test $tkpixmap_pixmaps = 1; then
    TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -DLOAD_PIXMAPS"
  fi
  if test $tkpixmap_xpm = 1 -o $tkpixmap_localxpm = 1; then
    AC_CHECK_LIB(Xpm, main, has_global_xpm=1, has_global_xpm=0, $XLIBSW $LIBS)
    if test $tkpixmap_localxpm = 1 -o $has_global_xpm = 0; then
      echo "using the local XPM library"
      BUILD_TARGETS="$BUILD_TARGETS build-libxpm"
      TKPIXMAP_CFLAGS="$TKPIXMAP_CFLAGS -I../libxpm"
      EXTENSION_X11_LIBS="$EXTENSION_X11_LIBS ../libxpm/libXpm.a"
    else
      EXTENSION_X11_LIBS="$EXTENSION_X11_LIBS -lXpm"
    fi
  fi
fi
AC_SUBST(TKPIXMAP_CFLAGS)
AC_SUBST(TKPIXMAP_OBJS)
AC_SUBST(TKPIXMAP_LIBS)
AC_SUBST(TKPIXMAP_LIB)
AC_SUBST(TKPIXMAP_LOCALLIB_OBJS)
AC_SUBST(TKPIXMAP_TKLIB_OBJS)

# TkSteal
TKSTEAL_CFLAGS=""
TKSTEAL_OBJS=""
TKSTEAL_LIBS=""
TKSTEAL_LIB=""
TKSTEAL_LOCALLIB_OBJS=""
TKSTEAL_TKLIB_OBJS=""
AC_ARG_WITH(tksteal, [  --with-tksteal          add the TkSteal package], tksteal=1)
if test $tksteal = 1; then
  echo adding TkSteal
  GET_TARGETS="$GET_TARGETS get-tksteal-files"
  BUILD_TARGETS="$BUILD_TARGETS build-libtksteal"
  TKSTEAL_CFLAGS="-I../libTkSteal -DUSE_XACCESS"
  TKSTEAL_LOCALLIB_OBJS="tkXAccess.o"
  TKSTEAL_LIB="TkSteal"
  if test "$SHDIR" != ""; then
    TKSTEAL_LIBS="-lTkSteal"
    TKSTEAL_SHARED_LIBS=""
  else
    TKSTEAL_LIBS="../libTkSteal/libTkSteal.a"
    TKSTEAL_SHARED_LIBS=""
  fi
fi
AC_SUBST(TKSTEAL_CFLAGS)
AC_SUBST(TKSTEAL_OBJS)
AC_SUBST(TKSTEAL_LIBS)
AC_SUBST(TKSTEAL_SHARED_LIBS)
AC_SUBST(TKSTEAL_LIB)
AC_SUBST(TKSTEAL_LOCALLIB_OBJS)
AC_SUBST(TKSTEAL_TKLIB_OBJS)

# TkMegaWidget
TKMEGAWIDGET_CFLAGS=""
TKMEGAWIDGET_OBJS=""
TKMEGAWIDGET_LIBS=""
TKMEGAWIDGET_LIB=""
TKMEGAWIDGET_LOCALLIB_OBJS=""
TKMEGAWIDGET_TKLIB_OBJS=""
AC_ARG_WITH(tkmegawidget, [  --with-tkmegawidget     add the TkMegaWidget package], tkmegawidget=1)
AC_ARG_WITH(tkmegawidget-des, [  --with-tkmegawidget-des      add the DES support], tkmegawidget_des=1; tkmegawidget=1)
AC_ARG_WITH(tkmegawidget-localdes, [  --with-tkmegawidget-localdes add the DES support (use the local DES library)], tkmegawidget_localdes=1; tkmegawidget=1)
if test $tkmegawidget = 1; then
  echo adding TkMegaWidget
  GET_TARGETS="$GET_TARGETS get-tkmegawidget-files"
  BUILD_TARGETS="$BUILD_TARGETS build-libtkmegawidget"
  TKMEGAWIDGET_CFLAGS="-I../libTkMegaWidget -DUSE_MEGAWIDGET"
  TKMEGAWIDGET_LOCALLIB_OBJS="tkMegaWidget.o"
  TKMEGAWIDGET_LIB="TkMegaWidget"
  if test "$SHDIR" != ""; then
    TKMEGAWIDGET_LIBS="-lTkMegaWidget"
    TKMEGAWIDGET_SHARED_LIBS=""
  else
    TKMEGAWIDGET_LIBS="../libTkMegaWidget/libTkMegaWidget.a"
    TKMEGAWIDGET_SHARED_LIBS=""
  fi
  if test $tkmegawidget_des = 1 -o $tkmegawidget_localdes = 1; then
    TKMEGAWIDGET_CFLAGS="$TKMEGAWIDGET_CFLAGS -DUSE_DES"
  fi
  if test $tkmegawidget_des = 1 -o $tkmegawidget_localdes = 1; then
    AC_CHECK_LIB(des, main, has_global_des=1, has_global_des=0)
    if test $tkmegawidget_localdes = 1 -o $has_global_des = 0; then
      echo "using the local DES library"
      BUILD_TARGETS="$BUILD_TARGETS build-libdes"
      TKMEGAWIDGET_CFLAGS="$TKMEGAWIDGET_CFLAGS -I../libdes"
      TKMEGAWIDGET_LIBS="$TKMEGAWIDGET_LIBS ../libdes/libdes.a"
      if test "$SHDIR" != ""; then
        TKMEGAWIDGET_SHARED_LIBS=""
      fi
    else
      TKMEGAWIDGET_LIBS="$TKMEGAWIDGET_LIBS -ldes"
      if test "$SHDIR" != ""; then
        TKMEGAWIDGET_SHARED_LIBS=""
      fi
    fi
  fi
fi
AC_SUBST(TKMEGAWIDGET_CFLAGS)
AC_SUBST(TKMEGAWIDGET_OBJS)
AC_SUBST(TKMEGAWIDGET_LIBS)
AC_SUBST(TKMEGAWIDGET_SHARED_LIBS)
AC_SUBST(TKMEGAWIDGET_LIB)
AC_SUBST(TKMEGAWIDGET_LOCALLIB_OBJS)
AC_SUBST(TKMEGAWIDGET_TKLIB_OBJS)

# TkMobal
TKMOBAL_CFLAGS=""
TKMOBAL_OBJS=""
TKMOBAL_LIBS=""
TKMOBAL_LIB=""
TKMOBAL_LOCALLIB_OBJS=""
TKMOBAL_TKLIB_OBJS=""
AC_ARG_WITH(tkmobal, [  --with-tkmobal          add the TkMobal package], tkmobal=1)
if test $tkmobal = 1; then
  echo adding TkMobal
  GET_TARGETS="$GET_TARGETS get-tkmobal-files"
  PATCH_TARGETS="$PATCH_TARGETS patch-tkmobal-files"
  BUILD_TARGETS="$BUILD_TARGETS build-libtkmobal"
  TKMOBAL_CFLAGS="-DUSE_MOBAL"
  TKMOBAL_LOCALLIB_OBJS="tkMobalExt.o"
  TKMOBAL_LIB="TkMobal"
  if test "$SHDIR" != ""; then
    TKMOBAL_LIBS="-lTkMobal"
    TKMOBAL_SHARED_LIBS=""
  else
    TKMOBAL_LIBS="../libTkMobal/libTkMobal.a"
    TKMOBAL_SHARED_LIBS=""
  fi
fi
AC_SUBST(TKMOBAL_CFLAGS)
AC_SUBST(TKMOBAL_OBJS)
AC_SUBST(TKMOBAL_LIBS)
AC_SUBST(TKMOBAL_SHARED_LIBS)
AC_SUBST(TKMOBAL_LIB)
AC_SUBST(TKMOBAL_LOCALLIB_OBJS)
AC_SUBST(TKMOBAL_TKLIB_OBJS)

# TkXF
TKXF_CFLAGS=""
TKXF_OBJS=""
TKXF_LIBS=""
TKXF_LIB=""
TKXF_LOCALLIB_OBJS=""
TKXF_TKLIB_OBJS=""
AC_ARG_WITH(tkxf, [  --with-tkxf             add the XF extensions], tkxf=1)
if test $tkxf = 1; then
  echo adding TkXF
  GET_TARGETS="$GET_TARGETS get-tkxf-files"
  PATCH_TARGETS="$PATCH_TARGETS patch-tkxf-files"
  BUILD_TARGETS="$BUILD_TARGETS build-libtkxf"
  TKXF_CFLAGS="-DUSE_XF -DUSE_FSCALE"
  TKXF_OBJS=""
  TKXF_LOCALLIB_OBJS="Dbg.o tkXFExt.o tkFScale.o tkTreeTable.o"
  TKXF_LIB="TkXF"
  if test "$SHDIR" != ""; then
    TKXF_LIBS="-lTkXF"
    TKXF_SHARED_LIBS=""
  else
    TKXF_LIBS="../libTkXF/libTkXF.a"
    TKXF_SHARED_LIBS=""
  fi
fi
AC_SUBST(TKXF_CFLAGS)
AC_SUBST(TKXF_OBJS)
AC_SUBST(TKXF_LIBS)
AC_SUBST(TKXF_SHARED_LIBS)
AC_SUBST(TKXF_LIB)
AC_SUBST(TKXF_LOCALLIB_OBJS)
AC_SUBST(TKXF_TKLIB_OBJS)

# BLT
BLT_CFLAGS=""
BLT_OBJS=""
BLT_LIBS=""
BLT_LIB=""
AC_ARG_WITH(blt, [  --with-blt              add the BLT package], blt=1)
if test $blt = 1; then
  echo adding BLT
  AC_CHECK_LIB(BLT, main, has_global_blt=1, has_global_blt=0, $XLIBSW $LIBS)
  if test $has_global_blt = 1; then
    BLT_CFLAGS="-DUSE_BLT"
    BLT_LIBS="-L\${LIB_DIR} -lBLT"
  else
    echo "searching for a libBLT.a in ../blt/src"
    if test -f ../blt/src/libBLT.a; then
      echo "using ../blt/src/libBLT.a instead of a globally installed libBLT.a"
      BLT_CFLAGS="-DUSE_BLT"
      BLT_LIBS="../../blt/src/libBLT.a"
    else
      echo "WARNING: Could not find a globally installed libBLT.a!"
    fi
  fi
fi
AC_SUBST(BLT_CFLAGS)
AC_SUBST(BLT_OBJS)
AC_SUBST(BLT_LIBS)
AC_SUBST(BLT_LIB)

# ITCL
ITCL_CFLAGS=""
ITCL_OBJS=""
ITCL_LIBS=""
ITCL_LIB=""
AC_ARG_WITH(itcl, [  --with-itcl             add the ITcl package], itcl=1)
if test $itcl = 1; then
  echo adding itcl
  AC_CHECK_LIB(itcl, main, has_global_itcl=1, has_global_itcl=0)
  if test $has_global_itcl = 1; then
    ITCL_CFLAGS="-DUSE_ITCL"
    ITCL_LIBS="-L\${LIB_DIR} -litcl"
  else
    echo "searching for a libitcl.a in ../itcl/src"
    if test -f ../itcl/src/libitcl.a; then
      echo "using ../itcl/src/libitcl.a instead of a globally installed libitcl.a"
      ITCL_CFLAGS="-DUSE_ITCL"
      ITCL_LIBS="../../itcl/src/libitcl.a"
    else
      echo "WARNING: Could not find a globally installed libitcl.a!"
    fi
  fi
fi
AC_SUBST(ITCL_CFLAGS)
AC_SUBST(ITCL_OBJS)
AC_SUBST(ITCL_LIBS)
AC_SUBST(ITCL_LIB)

# EXPECT
EXPECT_CFLAGS=""
EXPECT_OBJS=""
EXPECT_LIBS=""
EXPECT_LIB=""
AC_ARG_WITH(expect, [  --with-expect           add the expect package], expect=1)
if test $expect = 1; then
  echo adding expect
  AC_CHECK_LIB(expectk, main, has_global_expect=1, has_global_expect=0, $XLIBSW $LIBS)
  if test $has_global_expect = 1; then
    EXPECT_CFLAGS="-DUSE_EXPECT -DTCL_DEBUGGER"
    EXPECT_LIBS="-L\${LIB_DIR} -lexpectk"
  else
    echo "searching for a libexpectk.a in ../expect"
    if test -f ../expect/libexpectk.a; then
      echo "using ../expect/libexpectk.a instead of a globally installed libexpectk.a"
      EXPECT_CFLAGS="-DUSE_EXPECT -DTCL_DEBUGGER"
      EXPECT_LIBS="../../expect/libexpectk.a"
    else
      echo "WARNING: Could not find a globally installed libexpectk.a!"
    fi
  fi
fi
AC_SUBST(EXPECT_CFLAGS)
AC_SUBST(EXPECT_OBJS)
AC_SUBST(EXPECT_LIBS)
AC_SUBST(EXPECT_LIB)

# Extended Tcl
EXTENDED_CFLAGS=""
EXTENDED_OBJS=""
EXTENDED_LIBS=""
EXTENDED_LIB=""
AC_ARG_WITH(tclX, [  --with-tclx             add the TclX package], tclX=1)
if test $tclX = 1; then
  echo adding TclX
  AC_CHECK_LIB(tclx, main, has_global_tclx=1, has_global_tclx=0)
  if test $has_global_tclx = 1; then
    EXTENDED_CFLAGS="-I/usr/local/include -DTK_EXTENDED"
    EXTENDED_LIBS="-L\${LIB_DIR} -ltkx -ltclx"
  else
    echo "searching for a libtclx.a in ../tclX/tclmaster/lib"
    if test -f ../tclX/tclmaster/lib/libtclx.a -a -f ../tclX/tkmaster/lib/libtkx.a; then
      echo "using ../tclX/tclmaster/lib/libtclx.a instead of a globally installed libtclx.a"
      EXTENDED_CFLAGS="-I/usr/local/include -I../../tclX/src -I../../tclX/tksrc -DTK_EXTENDED"
      EXTENDED_LIBS="../../tclX/tkmaster/lib/libtkx.a ../../tclX/tclmaster/lib/libtclx.a"
    else
      echo "WARNING: Could not find a globally installed libtclx.a!"
    fi
  fi
fi
AC_SUBST(EXTENDED_CFLAGS)
AC_SUBST(EXTENDED_OBJS)
AC_SUBST(EXTENDED_LIBS)
AC_SUBST(EXTENDED_LIB)

# Tcl-DP
TCLDP_CFLAGS=""
TCLDP_OBJS=""
TCLDP_LIBS=""
TCLDP_LIB=""
AC_ARG_WITH(tcldp, [  --with-tcldp            add the Tcl-DP package], tcldp=1)
if test $tcldp = 1; then
  echo adding Tcl-DP
  AC_CHECK_LIB(dpnetwork, main, has_global_dpnetwork=1, has_global_dpnetwork=0)
  if test $has_global_dpnetwork = 1; then
    TCLDP_CFLAGS="-DUSE_TCL_DP"
    TCLDP_LIBS="-L\${LIB_DIR} -ldpnetwork"
    AC_CHECK_LIB(dputil, main, [TCLDP_LIBS="$TCLDP_LIBS -ldputil"])
  else
    echo "searching for a libdpnetwork.a in ../tcl-dp"
    if test -f ../tcl-dp/libdpnetwork.a; then
      echo "using ../blt/libdpnetwork.a instead of a globally installed libdpnetwork.a"
      TCLDP_CFLAGS="-DUSE_TCL_DP"
      TCLDP_LIBS="../../tcl-dp/libdpnetwork.a"
      if test -f ../tcl-dp/libdputil.a; then
        TCLDP_LIBS="$TCLDP_LIBS ../../tcl-dp/libdputil.a"
        echo "using ../blt/libdputil.a instead of a globally installed libdputil.a"
      fi
    else
      echo "WARNING: Could not find a globally installed libdpnetwork.a!"
    fi
  fi
fi
AC_SUBST(TCLDP_CFLAGS)
AC_SUBST(TCLDP_OBJS)
AC_SUBST(TCLDP_LIBS)
AC_SUBST(TCLDP_LIB)

# Tcl-Load
TCLLOAD_CFLAGS=""
TCLLOAD_OBJS=""
TCLLOAD_LIBS=""
TCLLOAD_LIB=""
AC_ARG_WITH(tclload, [  --with-tclload          add the dynamic loading package], tclload=1)
if test $tclload = 1; then
  case "$OS_TYPE" in
    SVR4)
      case "$MACHINE" in
        sparc-*-solaris2* | sparc-*-sunos5*)
          echo adding Tcl-LOAD for SUN-SOLARIS
          if test -f ../shells/solaris.o; then
            TCLLOAD_CFLAGS="-DUSE_LOAD"
            TCLLOAD_OBJS="../../shells/solaris.o"
          else
            echo "WARNING: Could not find ../shells/solaris.o!"
          fi
          ;;
      esac
      ;;
    SUN) 
      echo adding Tcl-LOAD for SUN-OS
      if test -f ../shells/sunos.o; then
        TCLLOAD_CFLAGS="-DUSE_LOAD"
        TCLLOAD_OBJS="../../shells/sunos.o"
      else
        echo "WARNING: Could not find ../shells/sunos.o!"
      fi
      ;;
    HP) 
      echo adding Tcl-LOAD for HPUX
      if test -f ../shells/hpux.o; then
        TCLLOAD_CFLAGS="-DUSE_LOAD"
        TCLLOAD_OBJS="../../shells/hpux.o"
      else
        echo "WARNING: Could not find ../shells/hpux.o!"
      fi
      ;;
    TEST) 
      echo adding Tcl-LOAD for TEST
      if test -f ../shells/test.o; then
        TCLLOAD_CFLAGS="-DUSE_LOAD"
        TCLLOAD_OBJS="../../shells/test.o"
      else
        echo "WARNING: Could not find ../shells/test.o!"
      fi
      ;;
    *)
      case "$MACHINE" in
        alpha-dec-osf* | alpha-*-osf*)
          echo adding Tcl-LOAD for OSF/1
          if test -f ../shells/osf1.o; then
            TCLLOAD_CFLAGS="-DUSE_LOAD"
            TCLLOAD_OBJS="../../shells/osf1.o"
          else
            echo "WARNING: Could not find ../shells/osf1.o!"
          fi
          ;;
      esac
      ;;
  esac
fi
AC_SUBST(TCLLOAD_CFLAGS)
AC_SUBST(TCLLOAD_OBJS)
AC_SUBST(TCLLOAD_LIBS)
AC_SUBST(TCLLOAD_LIB)

# test if we have to rebuild libtk (currently this
# is always required because of the new tkMain.c).
if test $tkicon = 1 -o $tkpixmap = 1 -o $tkmegawidget = 1 -o $tksteal = 1; then
  BUILD_TARGETS="build-libtk $BUILD_TARGETS"
fi

AC_SUBST(GET_TARGETS)
AC_SUBST(PATCH_TARGETS)
AC_SUBST(BUILD_TARGETS)
AC_SUBST(EXTENSION_X11_LIBS)

#--------------------------------------------------------------------
#       Create the new config.local
#--------------------------------------------------------------------
echo creating config.local

rm config.local
echo "WISH_NAME=$WISH_NAME" > config.local
if test "$prefix" != ""; then
  echo "if test \"\$prefix\" = \"\"; then" >> config.local
  echo "  prefix=$prefix" >> config.local
  echo "fi" >> config.local
fi
if test "$exec_prefix" != ""; then
  echo "if test \"\$exec_prefix\" = \"\"; then" >> config.local
  echo "  exec_prefix=$exec_prefix" >> config.local
  echo "fi" >> config.local
fi
echo "noshlib=$noshlib" >> config.local
echo "kanji=$kanji" >> config.local
echo "tkicon=$tkicon" >> config.local
echo "tkpixmap=$tkpixmap" >> config.local
echo "tkpixmap_xpm=$tkpixmap_xpm" >> config.local
echo "tkpixmap_localxpm=$tkpixmap_localxpm" >> config.local
echo "tkpixmap_gif=$tkpixmap_gif" >> config.local
echo "tkpixmap_raw256=$tkpixmap_raw256" >> config.local
echo "tkpixmap_dps=$tkpixmap_dps" >> config.local
echo "tkpixmap_pinfo=$tkpixmap_pinfo" >> config.local
echo "tkpixmap_uxpm=$tkpixmap_uxpm" >> config.local
echo "tkpixmap_pixmaps=$tkpixmap_pixmaps" >> config.local
echo "tksteal=$tksteal" >> config.local
echo "tkmegawidget=$tkmegawidget" >> config.local
echo "tkmegawidget_des=$tkmegawidget_des" >> config.local
echo "tkmegawidget_localdes=$tkmegawidget_localdes" >> config.local
echo "tkmobal=$tkmobal" >> config.local
echo "tkxf=$tkxf" >> config.local
echo "blt=$blt" >> config.local
echo "itcl=$itcl" >> config.local
echo "expect=$expect" >> config.local
echo "tclX=$tclX" >> config.local
echo "tcldp=$tcldp" >> config.local
echo "tclload=$tclload" >> config.local

#--------------------------------------------------------------------
#       This stuff must run after the "standard" Tk configure.
#--------------------------------------------------------------------

if test "$CC" = "gcc" -a "$PICFLAGS" != ""; then \
  PICFLAGS="-fPIC"
fi
AC_SUBST(PICFLAGS)

export MAKEFILE_LIST
MAKEFILE_LIST=""
if test -d libTkMegaWidget; then
  MAKEFILE_LIST="$MAKEFILE_LIST libTkMegaWidget/Makefile"
fi
if test -d libTkSteal; then
  MAKEFILE_LIST="$MAKEFILE_LIST libTkSteal/Makefile"
fi
if test -d libTkMobal; then
  MAKEFILE_LIST="$MAKEFILE_LIST libTkMobal/Makefile"
fi
if test -d libTkXF; then
  MAKEFILE_LIST="$MAKEFILE_LIST libTkXF/Makefile"
fi
if test -d libdes; then
  MAKEFILE_LIST="$MAKEFILE_LIST libdes/Makefile"
fi
if test -d libxpm; then
  MAKEFILE_LIST="$MAKEFILE_LIST libxpm/Makefile"
fi

AC_OUTPUT(Makefile libtk/Makefile wish/Makefile $MAKEFILE_LIST)

